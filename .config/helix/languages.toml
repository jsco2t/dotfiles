# language servers
# -----------------------------------------------------------------------------------
[language-server]
bash-language-server = { command = "bash-language-server", args = ["start"] }
bufls = { command = "bufls", args = ["serve"] }
cmake-language-server = { command = "cmake-language-server" }
docker-langserver = { command = "docker-langserver", args = ["--stdio"] }
docker-compose-langserver = { command = "docker-compose-langserver", args = [
  "--stdio",
] }
marksman = { command = "marksman", args = ["server", "--verbose", "0"] }
pylsp = { command = "pylsp" }
pyright = { command = "pyright-langserver", args = ["--stdio"], config = {} }
basedpyright = { command = "basedpyright-langserver", args = [
  "--stdio",
], config = {} }
pylyzer = { command = "pylyzer", args = ["--server"] }
taplo = { command = "taplo", args = ["lsp", "stdio"] }
terraform-ls = { command = "terraform-ls", args = ["serve"] }
yaml-language-server = { command = "yaml-language-server", args = ["--stdio"] }
helm_ls = { command = "helm_ls", args = ["serve"] }
vscode-json-language-server = { command = "vscode-json-language-server", args = [
  "--stdio",
], config = { provideFormatter = true, json = { validate = { enable = true } } } }

#[language-server.gopls]
#command = "gopls"

# see: https://github.com/helix-editor/helix/discussions/4681#discussioncomment-8350508
[language-server.gopls]
command = "gopls"
config = { gofumpt = true, local = "goimports", semanticTokens = true, staticcheck = true, verboseOutput = true, analyses = { fieldalignment = true, nilness = true, unusedparams = true, unusedwrite = true, useany = true }, usePlaceholders = true, completeUnimported = true, hints = { assignVariableType = true, compositeLiteralFields = true, compositeLiteralTypes = true, constantValues = true, functionTypeParameters = true, parameterNames = true, rangeVariableTypes = true } }

#[language-server.gopls.config.hints]
#assignVariableTypes = true
#compositeLiteralFields = true
#constantValues = true
#functionTypeParameters = true
#parameterNames = true
#rangeVariableTypes = true

[language-server.golangci-lint-lsp]
command = "golangci-lint-langserver"

[language-server.golangci-lint-lsp.config]
command = [
  "golangci-lint",
  "run",
  "--out-format",
  "json",
  "--issues-exit-code=1",
]

[language-server.rust-analyzer.config.check]
command = "clippy"

[language-server.rust-analyzer]
command = "rust-analyzer"

[language-server.efm]
command = "efm-langserver"

# spellcheck and grammar
# -----------------------------------------------------------------------------------
[language-server.vale]
command = "vale-ls"

# languages
# -----------------------------------------------------------------------------------

#
# go
#

[[language]]
name = "go"
scope = "source.go"
injection-regex = "go"
file-types = ["go"]
roots = ["go.mod", "go.work"]
auto-format = true
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
language-servers = ["gopls", "golangci-lint-lsp"]
# TODO: gopls needs utf-8 offsets?
indent = { tab-width = 4, unit = "\t" }
formatter = { command = "gofumpt" }
rulers = [120]

[language.debugger]
name = "go"
transport = "tcp"
command = "dlv"
args = ["dap"]
port-arg = "-l 127.0.0.1:{}"

[[language.debugger.templates]]
name = "source"
request = "launch"
completion = [{ name = "entrypoint", completion = "filename", default = "." }]
args = { mode = "debug", program = "{0}" }

[[language.debugger.templates]]
name = "binary"
request = "launch"
completion = [{ name = "binary", completion = "filename" }]
args = { mode = "exec", program = "{0}" }

[[language.debugger.templates]]
name = "test"
request = "launch"
completion = [{ name = "tests", completion = "directory", default = "." }]
args = { mode = "test", program = "{0}" }

[[language.debugger.templates]]
name = "attach"
request = "attach"
completion = ["pid"]
args = { mode = "local", processId = "{0}" }

[[language.debugger.templates]]
name = "core"
request = "launch"
completion = [
  { name = "binary", completion = "filename" },
  { name = "core", completion = "filename" },
]
args = { mode = "core", program = "{0}", coreFilePath = "{1}" }

[[grammar]]
name = "go"
#source = { git = "https://github.com/tree-sitter/tree-sitter-go", rev = "64457ea6b73ef5422ed1687178d4545c3e91334a" }
source = { git = "https://github.com/tree-sitter/tree-sitter-go" }

[[language]]
name = "gomod"
scope = "source.gomod"
injection-regex = "gomod"
file-types = [{ glob = "go.mod" }]
auto-format = true
comment-token = "//"
language-servers = ["gopls"]
indent = { tab-width = 4, unit = "\t" }

[[grammar]]
name = "gomod"
#source = { git = "https://github.com/camdencheek/tree-sitter-go-mod", rev = "e8f51f8e4363a3d9a427e8f63f4c1bbc5ef5d8d0" }
source = { git = "https://github.com/camdencheek/tree-sitter-go-mod" }

[[language]]
name = "gotmpl"
scope = "source.gotmpl"
injection-regex = "gotmpl"
file-types = ["gotmpl"]
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
language-servers = ["gopls"]
indent = { tab-width = 2, unit = " " }
rulers = [120]

[[grammar]]
name = "gotmpl"
#source = { git = "https://github.com/dannylongeuay/tree-sitter-go-template", rev = "395a33e08e69f4155156f0b90138a6c86764c979" }
source = { git = "https://github.com/dannylongeuay/tree-sitter-go-template" }

[[language]]
name = "gowork"
scope = "source.gowork"
injection-regex = "gowork"
file-types = [{ glob = "go.work" }]
auto-format = true
comment-token = "//"
language-servers = ["gopls"]
indent = { tab-width = 4, unit = "\t" }
rulers = [120]

[[grammar]]
name = "gowork"
#source = { git = "https://github.com/omertuc/tree-sitter-go-work", rev = "6dd9dd79fb51e9f2abc829d5e97b15015b6a8ae2" }
source = { git = "https://github.com/omertuc/tree-sitter-go-work" }

[[language]]
name = "templ"
scope = "source.templ"
file-types = ["templ"]
roots = ["go.work", "go.mod"]
comment-token = "//"
indent = { tab-width = 2, unit = "  " }
language-servers = ["templ"]

[[grammar]]
name = "templ"
#source = { git = "https://github.com/vrischmann/tree-sitter-templ", rev = "db662414ccd6f7c78b1e834e7abe11c224b04759" }
source = { git = "https://github.com/vrischmann/tree-sitter-templ" }

#
# markdown
#

[[language]]
name = "markdown"
language-servers = ["vale", "marksman", { name = "efm", only-features = [ "diagnostics" ] }]
file-types = ["md", "mdx"]
formatter = { command = 'prettier', args = ["--parser", "markdown"] }
text-width = 100
rulers = [100]
auto-format = true
indent = { tab-width = 2, unit = "  " }
block-comment-tokens = { start = "<!--", end = "-->" }
#scope = "text.markdown"
#roots = []

#
# toml
#

[[language]]
name = "toml"
formatter = { command = "taplo", args = ["fmt", "-"] }

#
# rust
#

[[language]]
name = "rust"
scope = "source.rust"
injection-regex = "rs|rust"
file-types = ["rs"]
roots = ["Cargo.toml", "Cargo.lock"]
shebangs = ["rust-script", "cargo"]
auto-format = true
comment-tokens = ["//", "///", "//!"]
block-comment-tokens = [
  { start = "/*", end = "*/" },
  { start = "/**", end = "*/" },
  { start = "/*!", end = "*/" },
]
language-servers = ["rust-analyzer"]
indent = { tab-width = 4, unit = "    " }
persistent-diagnostic-sources = ["rustc", "clippy"]

#
# helm
#

[[language]]
name = "helm"
grammar = "gotmpl"
scope = "source.helm"
roots = ["Chart.yaml"]
comment-token = "#"
language-servers = ["helm_ls"]
file-types = [
  { glob = "templates/*.yaml" },
  { glob = "templates/*.yml" },
  { glob = "templates/_*.tpl" },
  { glob = "templates/NOTES.txt" },
]

#
# toml
#

[[language]]
name = "toml"
scope = "source.toml"
injection-regex = "toml"
file-types = [
  "toml",
  { glob = "pdm.lock" },
  { glob = "poetry.lock" },
  { glob = "Cargo.lock" },
  { glob = "uv.lock" },
]
comment-token = "#"
language-servers = ["taplo"]
indent = { tab-width = 2, unit = "  " }

[[grammar]]
name = "toml"
#source = { git = "https://github.com/ikatyang/tree-sitter-toml", rev = "7cff70bbcbbc62001b465603ca1ea88edd668704" }
source = { git = "https://github.com/ikatyang/tree-sitter-toml" }

#
# yaml
#

[[language]]
name = "yaml"
scope = "source.yaml"
file-types = ["yml", "yaml"]
comment-token = "#"
indent = { tab-width = 2, unit = "  " }
language-servers = ["yaml-language-server", "ansible-language-server"]
injection-regex = "yml|yaml"
formatter = { command = 'prettier', args = ["--parser", "yaml"] }
auto-format = true


[[grammar]]
name = "yaml"
#source = { git = "https://github.com/ikatyang/tree-sitter-yaml", rev = "0e36bed171768908f331ff7dff9d956bae016efb" }
source = { git = "https://github.com/ikatyang/tree-sitter-yaml" }

#
# json
#

[[language]]
name = "json"
scope = "source.json"
injection-regex = "json"
file-types = [
  "json",
  "arb",
  "ipynb",
  "geojson",
  "gltf",
  "webmanifest",
  { glob = "flake.lock" },
  { glob = ".babelrc" },
  { glob = ".bowerrc" },
  { glob = ".jscrc" },
  "js.map",
  "ts.map",
  "css.map",
  { glob = ".jslintrc" },
  "jsonl",
  "jsonld",
  { glob = ".vuerc" },
  { glob = "composer.lock" },
  { glob = ".watchmanconfig" },
  "avsc",
  { glob = ".prettierrc" },
]
language-servers = ["vscode-json-language-server"]
auto-format = true
indent = { tab-width = 2, unit = "  " }
formatter = { command = 'prettier', args = ["--parser", "json"] }

[[grammar]]
name = "json"
#source = { git = "https://github.com/tree-sitter/tree-sitter-json", rev = "73076754005a460947cafe8e03a8cf5fa4fa2938" }
source = { git = "https://github.com/tree-sitter/tree-sitter-json" }

#
# python
#

[[language]]
name = "python"
scope = "source.python"
injection-regex = "py(thon)?"
file-types = [
  "py",
  "pyi",
  "py3",
  "pyw",
  "ptl",
  "rpy",
  "cpy",
  "ipy",
  "pyt",
  { glob = ".python_history" },
  { glob = ".pythonstartup" },
  { glob = ".pythonrc" },
  { glob = "SConstruct" },
  { glob = "SConscript" },
]
shebangs = ["python"]
roots = ["pyproject.toml", "setup.py", "poetry.lock", "pyrightconfig.json"]
comment-token = "#"
language-servers = ["pylsp"]
# TODO: pyls needs utf-8 offsets
indent = { tab-width = 4, unit = "    " }

[[grammar]]
name = "python"
#source = { git = "https://github.com/tree-sitter/tree-sitter-python", rev = "4bfdd9033a2225cc95032ce77066b7aeca9e2efc" }
source = { git = "https://github.com/tree-sitter/tree-sitter-python" }

#
# starlark / bazel
#

[[language]]
name = "starlark"
scope = "source.starlark"
injection-regex = "(starlark|bzl|bazel)"
file-types = [
  "bzl",
  "bazel",
  "star",
  { glob = "BUILD" },
  { glob = "BUILD.*" },
  { glob = "Tiltfile" },
  { glob = "WORKSPACE" },
]
comment-token = "#"
indent = { tab-width = 4, unit = "    " }
grammar = "python"

#
# bash
#

[[language]]
name = "bash"
scope = "source.bash"
injection-regex = "(shell|bash|zsh|sh)"
file-types = [
  "sh",
  "bash",
  "ash",
  "dash",
  "ksh",
  "mksh",
  "zsh",
  "zshenv",
  "zlogin",
  "zlogout",
  "zprofile",
  "zshrc",
  "eclass",
  "ebuild",
  "bazelrc",
  "Renviron",
  "zsh-theme",
  "cshrc",
  "tcshrc",
  "bashrc_Apple_Terminal",
  "zshrc_Apple_Terminal",
  { glob = "i3/config" },
  { glob = "sway/config" },
  { glob = "tmux.conf" },
  { glob = ".bash_history" },
  { glob = ".bash_login" },
  { glob = ".bash_logout" },
  { glob = ".bash_profile" },
  { glob = ".bashrc" },
  { glob = ".profile" },
  { glob = ".zshenv" },
  { glob = ".zlogin" },
  { glob = ".zlogout" },
  { glob = ".zprofile" },
  { glob = ".zshrc" },
  { glob = ".zimrc" },
  { glob = "APKBUILD" },
  { glob = ".bash_aliases" },
  { glob = ".Renviron" },
  { glob = ".xprofile" },
  { glob = ".xsession" },
  { glob = ".xsessionrc" },
  { glob = ".yashrc" },
  { glob = ".yash_profile" },
  { glob = ".hushlogin" },
]
shebangs = ["sh", "bash", "dash", "zsh"]
comment-token = "#"
language-servers = ["bash-language-server"]
indent = { tab-width = 2, unit = "  " }

[[grammar]]
name = "bash"
#source = { git = "https://github.com/tree-sitter/tree-sitter-bash", rev = "f8fb3274f72a30896075585b32b0c54cad65c086" }
source = { git = "https://github.com/tree-sitter/tree-sitter-bash" }
